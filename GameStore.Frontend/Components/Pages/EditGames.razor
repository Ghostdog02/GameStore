@page "/editgames"
@page "/editgames/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if (genres == null || gameDetails == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <div class="row">
    <div class="col-md-4">
      <EditForm Model="@gameDetails" FormName="editGameForm" OnValidSubmit="HandleSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
          <label for="name" class="form-label">Name:</label>
          <InputText id="name" @bind-Value="gameDetails.Name" class="form-control" />
          <ValidationMessage For="() => gameDetails.Name" />
        </div>
        <div class="mb-3">
          <label for="genre" class="form-label">Genre:</label>
          <InputSelect id="genre" @bind-Value="gameDetails.GenreId" class="form-control">
            <option value="">Select a genre</option>
            @foreach (var genre in genres)
            {
              <option value="@genre.Id">@genre.Name</option>
            }
          </InputSelect>
          <ValidationMessage For="() => gameDetails.GenreId" />
        </div>
        <div class="mb-3">
          <label for="price" class="form-label">Price:</label>
          <InputNumber id="price" @bind-Value="gameDetails.Price" class="form-control" />
          <ValidationMessage For="() => gameDetails.Price" />
        </div>
        <div class="mb-3">
          <label for="releaseDate" class="form-label">Release Date:</label>
          <InputDate id="releaseDate" @bind-Value="gameDetails.ReleaseDate" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <a role="button" class="btn btn-secondary" href="/">Cancel</a>
      </EditForm>
    </div>
  </div>
}


@code {
  [Parameter]
  public int? Id { get; set; }

  [SupplyParameterFromForm]
  private GameDetails? gameDetails { get; set; }

  private Genre[]? genres;
  private string title = string.Empty;

  protected override async Task OnParametersSetAsync()
  {
    if (gameDetails is not null)
    {
      return;
    }

    if (Id is not null)
    {
      gameDetails = await GamesClient.GetGameAsync(Id.Value);
      title = $"Edit Game: {gameDetails.Name}";
    }

    else
    {
      gameDetails = new()
      {
        Name = string.Empty,
        ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow),
      };

      title = "New Game";


    }
  }

  protected override async Task OnInitializedAsync()
  {
    genres = await GenresClient.GetGenresAsync();
  }

  private async Task HandleSubmitAsync()
  {
    ArgumentNullException.ThrowIfNull(gameDetails);

    if (Id is null)
    {
      await GamesClient.AddGameAsync(gameDetails);
    }

    else
    {
      gameDetails.Id = Id.Value;
      await GamesClient.UpdateGameAsync(gameDetails);
    }

    NavigationManager.NavigateTo("/");
  }
}